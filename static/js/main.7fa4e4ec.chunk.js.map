{"version":3,"sources":["Confidentiality.js","Contact.js","Assistance.js","TermOfUse.js","App.js","serviceWorker.js","index.js"],"names":["Assistance","Contact","App","to","path","Confidentiality","TermOfUse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAsBeA,MApBf,WACE,OAEE,8BACA,sDAEA,sLACA,sLAIA,uMAGE,iHACH,2BAAG,6CAAH,qCCDYC,MAdf,WACE,OAEE,8BACA,mDACA,2BAAG,6CAAH,oBACA,2BAAG,6CAAH,mCACA,2BAAG,uCAAH,uDCQWD,MAff,WACE,OACE,8BACA,+CAGC,oIACA,2BAAG,6CAAH,qCCQUA,MAff,WACE,OAEE,8BACA,4CAEA,wFAEE,oFACA,yHACF,gGCAW,SAASE,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,oBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,eAGF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAGF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,iBAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,oBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAACE,EAAD,UCnCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fa4e4ec.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Assistance() {\n  return (\n  \n    <body>\n    <h1>confidentiality polic </h1>\n\n    <p> 1- All user information are used by our company only for only prupose of identify the user, the data will no be shared not used for any commercial use</p>\n    <p> 2- Advirtisement rely on ad mob, which an advirtisiment service provided by google, more information can be found here:\n    https://admob.google.com/home/\n    </p>\n\n    <p> 2- As part of our advirtisement strategy, we use facebook advirtisiement, more information about their policies can be found herehttps://www.facebook.com/business/ads.\n    </p>\n\n      <p> The data are hosted on firebase server, that is the own by alphabet inc ( google)</p>\n   <p><b> Email adress:</b> fullhealthcompanion@gmail.com </p>\n      </body>\n  );\n}\n\nexport default Assistance;\n","import React from 'react';\n\nfunction Contact() {\n  return (\n\n    <body>\n    <h1>Contact Information</h1>\n    <p><b> Company name:</b> Full Health Inc</p>\n    <p><b> Email adress:</b> fullhealthcompanion@gmail.com </p>\n    <p><b> Adress:</b> 18 bis, Rue taieb siala, menzah4 tunis, tunisia </p>\n\n\n    </body>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\n\nfunction Assistance() {\n  return (\n    <body>\n    <h1>User Assistance</h1>\n\n\n     <p>to cancel subscriptions please visit the subscription page on either the app store or the play store.</p>\n     <p><b> Email adress:</b> fullhealthcompanion@gmail.com </p>\n    \n\n\n    </body>\n  );\n}\n\nexport default Assistance;\n","import React from 'react';\n\nfunction Assistance() {\n  return (\n  \n    <body>\n    <h1>Term Of Use </h1>\n\n    <p> 1- All the app content is the property of fullhealthinc,</p>\n\n      <p> 2-Content can be used only for recreational purposes</p>\n      <p>  3-To copy content and use it on any other app, webstie of platrfom is totally prohibated</p>\n    <p>4-the use of the content for any comercial reason is prohibated</p>\n    </body>\n  );\n}\n\nexport default Assistance;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Confidentiality from './Confidentiality';\nimport Contact from './Contact';\nimport Assistance from './Assistance';\nimport TermOfUse from './TermOfUse';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/Confidentiality\">Confidentiality</Link>\n          </li>\n          <li>\n            <Link to=\"/Assistance\">Assistance</Link>\n          </li>\n\n          <li>\n            <Link to=\"/Contact\">Contact</Link>\n          </li>\n\n          <li>\n            <Link to=\"/Term of Use\">Term of Use</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/Confidentiality\">\n            <Confidentiality />\n          </Route>\n          <Route path=\"/Assistance\">\n            <Assistance />\n          </Route>\n          <Route path=\"/Contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/Term Of Use\">\n            <TermOfUse />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Confidentiality.js","Contact.js","Assistance.js","App.js","serviceWorker.js","index.js"],"names":["Assistance","Contact","App","to","path","Confidentiality","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAiBeA,MAff,WACE,OAEE,8BACA,sDAEA,0GAEE,oIACA,mJACF,qOCIWC,MAdf,WACE,OAEE,8BACA,mDACA,2BAAG,6CAAH,oBACA,2BAAG,6CAAH,mCACA,2BAAG,uCAAH,uDCiDWD,MAxDf,WACE,OACE,8BACA,+CAEA,kIAEA,4BACE,2BAAG,sCACL,gDACA,yDACA,+DACA,mDACA,mDAIE,4BACA,2BAAG,4CAEL,gDACA,mDACA,oEACA,wDAGG,4BACD,2BAAG,yCAEL,gDACA,8CACA,mDACA,gDACA,oDACA,0CAGJ,4BACO,2BAAG,wCAEN,gDACA,2CACA,iDACA,kDAIC,0NCrCU,SAASE,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,oBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,eAGF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,oBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,UC5BQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e580865.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Assistance() {\n  return (\n  \n    <body>\n    <h1>confidentiality polic </h1>\n\n    <p> 1- All authentication-related activities are run by a third party: auth0.b</p>\n\n      <p> Personal information related to authentification will not be store anywhere in our company database.</p>\n      <p>  For more information about the third party    https:/tools.ietf.org/html/rfc6749#section-2.1 or  https:/auth0.com/</p>\n    <p> 2- Other personal user information, like preferred language or personal weight will not be sold anywhere and will be used only by our team, with the only purpose of improving the user experience.</p>\n    </body>\n  );\n}\n\nexport default Assistance;\n","import React from 'react';\n\nfunction Contact() {\n  return (\n\n    <body>\n    <h1>Contact Information</h1>\n    <p><b> Company name:</b> Full Health Inc</p>\n    <p><b> Email adress:</b> fullhealthcompanion@gmail.com </p>\n    <p><b> Adress:</b> 18 bis, Rue taieb siala, menzah4 tunis, tunisia </p>\n\n\n    </body>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\n\nfunction Assistance() {\n  return (\n    <body>\n    <h1>User Assistance</h1>\n\n    <p> - Our application is intuitive and easy to use just access our home page which contains 4 modules.</p>\n\n    <dl>\n      <b><dt>Diet </dt></b>\n    <dd> - Introduction </dd>\n    <dd> - Easy healthy breakfast</dd>\n    <dd> - Easy healthy lunch or dinner</dd>\n    <dd> - Healthy desserts</dd>\n    <dd> - Healthy drinks </dd>\n\n      </dl>\n\n      <dl>\n      <b><dt>Meditation </dt></b>\n\n    <dd> - Introduction </dd>\n    <dd> - Sleep Meditation</dd>\n    <dd> - Emotional Intelligence Meditation</dd>\n    <dd> -Letting Go Meditation</dd>\n\n      </dl>\n       <dl>\n      <b><dt>Programs</dt></b>\n\n    <dd> - Introduction </dd>\n    <dd> - Get Active </dd>\n    <dd> - A little Happier</dd>\n    <dd> - Improved fox </dd>\n    <dd> - Sleep liked baby </dd>\n    <dd> - Sleep </dd>\n\n      </dl>\n<dl>\n       <b><dt>workout</dt></b>\n\n    <dd> - Introduction </dd>\n    <dd> - Warm Up </dd>\n    <dd> - Parks Workouts</dd>\n    <dd> - Home Workouts </dd>\n\n      </dl>\n\n     <p> - Each module contains a list of components, you can simply click on the component button as per your choice and needs.\n    Thus, you will find tips according to the subject of the module.</p>\n\n\n\n    </body>\n  );\n}\n\nexport default Assistance;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Confidentiality from './Confidentiality';\nimport Contact from './Contact';\nimport Assistance from './Assistance';\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/Confidentiality\">Confidentiality</Link>\n          </li>\n          <li>\n            <Link to=\"/Assistance\">Assistance</Link>\n          </li>\n\n          <li>\n            <Link to=\"/Contact\">Contact</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/Confidentiality\">\n            <Confidentiality />\n          </Route>\n          <Route path=\"/Assistance\">\n            <Assistance />\n          </Route>\n          <Route path=\"/Contact\">\n            <Contact />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}